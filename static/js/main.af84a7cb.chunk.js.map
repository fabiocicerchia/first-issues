{"version":3,"sources":["ScrollComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["ScrollComponent","state","data","loading","page","prevY","entities","observer","y","boundingClientRect","this","curPage","length","getData","setState","IntersectionObserver","handleObserver","bind","root","rootMargin","threshold","observe","loadingRef","query","props","labels","map","x","encodeURIComponent","join","url","axios","get","then","res","issues","items","forEach","item","project","repository_url","replace","push","title","details","body","link","html_url","logo","toUpperCase","comments","total","total_count","classes","loadingTextCSS","display","className","style","minHeight","i","Accordion","key","AccordionSummary","expandIcon","aria-controls","id","Grid","container","spacing","Avatar","alt","src","issueTitle","Typography","heading","right","Badge","badgeContent","color","badge","fontSize","AccordionDetails","ref","height","margin","Component","withStyles","theme","flexGrow","width","marginLeft","topLabels","cursor","backdrop","App","undefined","selectLabel","style1","document","createElement","rel","appendChild","style2","script","async","e","clickedLabel","target","innerText","AppBar","position","Toolbar","variant","Alert","severity","Chip","size","onClick","indexOf","label","React","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af84a7cb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from 'prop-types';\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Avatar,\n  Badge,\n  Chip,\n  Grid,\n  Typography,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport StarIcon from '@material-ui/icons/Star';\nimport CallSplitIcon from '@material-ui/icons/CallSplit';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  badge: {\n    margin: '1rem',\n    display: 'inline-block',\n    fontSize: 'small',\n  },\n  issueTitle: {\n    width: '85%',\n  },\n  right: {\n    marginLeft: 'auto',\n  },\n  topLabels: {\n    margin: '0.1rem',\n    cursor: 'pointer',\n  },\n  backdrop: {\n    //zIndex: theme.zIndex.drawer + 1,\n    //color: '#fff',\n  },\n  heading: {\n  },\n});\n\nclass ScrollComponent extends Component {\n  static propTypes = {\n    classes: PropTypes.object.isRequired,\n    labels: PropTypes.object.isRequired,\n  };\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      loading: false,\n      page: 0,\n      prevY: 0\n    };\n  }\n\n  handleObserver(entities, observer) {\n    const y = entities[0].boundingClientRect.y;\n    if (this.state.prevY > y) {\n      const lastItem = this.state.data[this.state.data.length - 1];\n      const curPage = lastItem.page;\n      this.getData(curPage+1);\n      this.setState({ page: curPage+1 });\n    }\n    this.setState({ prevY: y });\n  }\n\n  componentDidMount() {\n    this.getData(this.state.page);\n\n    var options = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 1.0\n    };\n    \n    this.observer = new IntersectionObserver(\n      this.handleObserver.bind(this),\n      options\n    );\n    this.observer.observe(this.loadingRef);\n  }\n\n  getData(page) {\n    this.setState({ loading: true });\n\n    const query = 'state%3Aopen+'+this.props.labels.map(x => encodeURIComponent(\"label: \"+x)).join('+');\n    const sort = 'updated';\n    const order = 'desc';\n\n    const url = `https://api.github.com/search/issues?q=${query}&sort=${sort}&order=${order}&per_page=100&page=${page}`;\n    axios\n      .get(url)\n      .then(res => {\n        var issues = [];\n        \n        res.data.items.forEach(function(item) {\n          let project = item.repository_url.replace(/https:\\/\\/api.github.com\\/repos\\//, \"\")\n          issues.push({\n            page: page,\n            title: item.title,\n            details: item.body,\n            link: item.html_url,\n            project: project,\n            logo: project[0].toUpperCase(),\n            //stars: 12,\n            //forks: 12,\n            //issues: 12,\n            //pullrequests: 12,\n            comments: item.comments,\n            //watchers: 12,\n          });\n        });\n        \n        this.setState({\n          total: res.data.total_count,\n          data: [...this.state.data, ...issues]\n        });\n\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    // Additional css\n    const loadingCSS = {\n      height: \"100px\",\n      margin: \"30px\"\n    };\n\n    // To change the loading icon behavior\n    const loadingTextCSS = { display: this.state.loading ? \"block\" : \"none\" };\n\n    return (\n      <div className=\"container\">\n        <div style={{ minHeight: \"200px\" }}>\n          {this.state.data.map((item, i) => {\n            return (<Accordion key={i}>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n              >\n                  <Grid container className={classes.root} spacing={1}>\n                    <Grid item>\n                        <Avatar alt={item.project} src={item.logo} />\n                    </Grid>\n                    <Grid item className={classes.issueTitle}>\n                      <Typography className={classes.heading}>\n                        [{item.project}] {item.title}\n                      </Typography>\n                    </Grid>\n                    <Grid item className={classes.right}>\n                        {/*<Badge badgeContent={item.stars} color=\"primary\" className={classes.badge}><StarIcon fontSize=\"small\" /></Badge>*/}\n                        {/*<Badge badgeContent={item.forks} color=\"primary\" className={classes.badge}><CallSplitIcon fontSize=\"small\" /></Badge>*/}\n                        {/*<Badge badgeContent={item.issues} color=\"primary\" className={classes.badge}><BugReportIcon fontSize=\"small\" /></Badge>*/}\n                        {/*<Badge badgeContent={item.pullrequests} color=\"primary\" className={classes.badge}><LibraryBooksIcon fontSize=\"small\" /></Badge>*/}\n                        <Badge badgeContent={item.comments} color=\"primary\" className={classes.badge}><QuestionAnswerIcon fontSize=\"small\" /></Badge>\n                        {/*<Badge badgeContent={item.watchers} color=\"primary\" className={classes.badge}><VisibilityIcon fontSize=\"small\" /></Badge>*/}\n                    </Grid>\n                  </Grid>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography>{item.details}</Typography>\n                <Typography>{item.link}</Typography>\n              </AccordionDetails>\n            </Accordion>)\n          })}\n        </div>\n        <div\n          ref={loadingRef => (this.loadingRef = loadingRef)}\n          style={loadingCSS}\n        >\n          <span style={loadingTextCSS}>Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ScrollComponent);\n","/* eslint no-undef: 0 */ // --> OFF\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport ScrollComponent from './ScrollComponent.jsx';\n\nimport { withStyles } from '@material-ui/styles';\n\nimport {\n  AppBar,\n  Chip,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\n\nimport {\n  Alert,\n} from '@material-ui/lab';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  badge: {\n    margin: '1rem',\n    display: 'inline-block',\n    fontSize: 'small',\n  },\n  right: {\n    marginLeft: 'auto',\n  },\n  topLabels: {\n    margin: '0.1rem',\n    cursor: 'pointer',\n  },\n  backdrop: {\n    //zIndex: theme.zIndex.drawer + 1,\n    //color: '#fff',\n  },\n  heading: {\n  },\n});\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      total: undefined,\n      labels: [\n        'good first issue',\n      ]\n    };\n\n    this.selectLabel = this.selectLabel.bind(this);\n  }\n\n  static defaultProps = {\n    classes: {},\n    labels: [\n      '#starter-task',\n      'beginner',\n      'beginner friendly',\n      'beginners-only',\n      'contribution-starter',\n      'd: easy',\n      'difficulty/1:easy',\n      'difficulty/low',\n      'difficulty/newcomer',\n      'difficulty: easy',\n      'documentation',\n      'e-easy',\n      'easy',\n      'easy bug fix',\n      'easy-pick',\n      'exp/beginner',\n      'first time only',\n      'first-timers-only',\n      'for new contributors',\n      'good first bug',\n      'good first issue',\n      'good first task',\n      'good for beginner',\n      'good-first-contribution',\n      'jump-in',\n      'junior job',\n      'level:starter',\n      'low hanging fruit',\n      'low-hanging-fruit',\n      'newbie',\n      'nice first contribution',\n      'starter-issue',\n    ]\n  };\n\n  static propTypes = {\n    classes: PropTypes.object.isRequired,\n    labels: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    const style1 = document.createElement(\"link\");\n    style1.src = \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\";\n    style1.rel = \"stylesheet\";\n    document.body.appendChild(style1);\n\n    const style2 = document.createElement(\"link\");\n    style2.src = \"https://fonts.googleapis.com/icon?family=Material+Icons\";\n    style2.rel = \"stylesheet\";\n    document.body.appendChild(style2);\n\n    const script = document.createElement(\"script\");\n    script.src = \"https://unpkg.com/@material-ui/core@v4.4.0/umd/material-ui.production.min.js\";\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  selectLabel(e) {\n    //var selectedLabels = this.state.labels;\n    var clickedLabel = e.target.innerText;\n    //var index = selectedLabels.indexOf(clickedLabel)\n\n    this.setState(state => ({\n      labels: [clickedLabel]\n    }));\n    this.getData()\n\n    /*if (index > -1) {\n      selectedLabels.splice(index, 1);\n    } else {\n      selectedLabels.push(clickedLabel);\n    }\n\n    if (selectedLabels.length > 1) {\n      console.log('max');\n      return;\n    }\n\n    this.setState(state => ({\n      labels: selectedLabels\n    }));\n    this.getData()*/\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">FirstIssues {this.state.total}</Typography>\n          </Toolbar>\n        </AppBar>\n        <Alert severity=\"info\">\n          <Typography>Pick max 5 labels</Typography>\n          {this.props.labels.map((item, i) => {\n            return (<Chip key={i} size=\"small\" onClick={this.selectLabel} variant={this.state.labels.indexOf(item) > -1 ? \"default\" : \"outlined\"} color=\"primary\" label={item} className={classes.topLabels} />)\n          })}\n        </Alert>\n\n        <ScrollComponent labels={this.state.labels} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}